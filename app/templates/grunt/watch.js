/* This file has been generated by ox-ui-module generator.
 * Please only apply minor changes (better no changes at all) to this file
 * if you want to be able to run the generator again without much trouble.
 *
 * If you really have to change this file for whatever reason, try to contact
 * the core team and describe your use-case. May be, your changes can be
 * integrated into the templates to be of use for everybody.
 */
'use strict';

module.exports = function (grunt) {

    var conf = grunt.config().local.appserver;
    var proto = (conf && conf.protocol === 'https') ? 'https' : 'http';

    var livereloadConfig = (function () {
            var net = require('net');
            var server = net.createServer();
            var skipLivereload = false;
            server.on('error', function () {
                grunt.verbose.writeln('Livereload instance running, will enable send_livereload task.');
                skipLivereload = true;
            });
            server.listen(35729, function () {
                grunt.verbose.writeln('No Livereload instance running, will configure watch to start one.');
                server.close();
            });
            if (skipLivereload) {
                return false;
            } else if (proto === 'https') {
                return {
                    key: grunt.file.read('node_modules/grunt-contrib-connect/tasks/certs/server.key'),
                    cert: grunt.file.read('node_modules/grunt-contrib-connect/tasks/certs/server.crt')
                };
            } else {
                return true;
            }
        }());

    grunt.registerTask('send_livereload', function () {
        var done = this.async();
        if (!!livereloadConfig) {
            grunt.verbose.writeln('Using livereload from watch');
            done();
            return;
        }
        var http = require(proto);
        var req = http.request({
            hostname: 'localhost',
            port: 35729,
            path: '/changed',
            method: 'POST',
            rejectUnauthorized: false
        }, function () {
            grunt.verbose.writeln('Livereload request sent');
            done();
        });
        req.on('error', function (err) {
            grunt.log.warn('Could not send livereload:', err);
            done();
        });
        req.write(JSON.stringify({files: ['boot.js']}));
        req.end();
    });

    grunt.config.extend('watch', {

        options: {
            interval: 500,
            interrupt: true,
            debounceDelay: 500
        },
        manifests: {
            files: 'apps/**/manifest.json',
            tasks: ['manifests', 'force_update', 'send_livereload'],
            options: { livereload: livereloadConfig }
        },
        karma: {
            files: ['spec/**/*.js'],
            tasks: ['newer:jshint:specs', 'newer:copy:specs', 'karma:unit:run']
        },
        configs: {
            options: { reload: true },
            files: [
                'Gruntfile.js',
                'grunt/tasks/*.js'
            ],
            tasks: ['default']
        },
        all: {
            files: [
                'apps/**/*.{js,less}',
                'src/*',
                'lib/**/*.js',
                'bower.json',
                'package.json'
            ],
            tasks: ['default', 'send_livereload', 'karma:unit:run'],
            options: { livereload: livereloadConfig }
        }
    });

    grunt.loadNpmTasks('grunt-contrib-watch');
};
